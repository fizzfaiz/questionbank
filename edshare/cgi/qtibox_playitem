#!/usr/bin/perl -w
use strict;
use EPrints;
use LWP::UserAgent;
use Data::Dumper;
use Archive::Zip;

my $qtiengine_host = "qtiengine.qtitools.org";

my $session = EPrints::Session->new();
my $docid = $session->param("docid");

if (!defined($docid)) {
	return;
}

my $doc = EPrints::DataObj::Document->new($session, $docid);
my $itemxml;

# get item contents
if ($doc->get_value("main") =~ /\.zip$/) {
	# if a content package, abort if it's got more than one item (or a test) 
	# or get the single item's xml
	$itemxml = contentpackage_singleitem_xml($doc);
	if (!$itemxml) {
		print "Multiple item or assessmentTest content packages are not supported yet -- \nonly content packages with a single QTI assessmentItem.\n";
		$session->terminate();
		exit;
	}
} else {
	# get the item's xml
	my $path = $doc->local_path() . "/" . $doc->get_value("main");
	open(FILE, $path) or die "Couldn't open file: $!";
	$itemxml = join("", <FILE>);
	close FILE;
}

# boundary -- see http://www.w3.org/Protocols/rfc1341/7_2_Multipart.html
my $boundary;
while (1) {
	$boundary = "--------------------------------";
	for (my $i = 0; $i < 13; ) {
		my $j = chr(int(rand(127)));
		if ($j =~ /[a-zA-Z0-9]/) {
			$boundary .= $j;
			$i++;
		}
	}
	if ($itemxml !~ /$boundary/) {
		last;
	}
}

# build request
my $request =	"--$boundary\r\n";
$request .=	"Content-Disposition: form-data; name=\"uploadedContent\"; filename=\"" . $doc->get_value("main") . "\"\r\n";
$request .=	"Content-Type: application/xml\r\n";
$request .=	"\r\n";
$request .=	$itemxml;
$request .=	"\r\n--$boundary--\r\n\r\n";

# user agent object
my $ua = LWP::UserAgent->new();
$ua->max_redirect(0);

# request object
my $url = "/application/upload";
my $req = HTTP::Request->new("POST" => "http://" . $qtiengine_host . $url);
$req->protocol("HTTP/1.1");
$req->header("Host" => $qtiengine_host);
$req->header("Accept" => "*/*");
$req->header("Content-Length" => length($request));
$req->header("Content-Type" => "multipart/form-data; boundary=$boundary");
$req->content($request);

# make requests until we're redirected to the preview page
my $error = undef;
while (1) {
	my $res = $ua->request($req);

	if (!$res->is_redirect()) {
		$error = "Didn't get a redirection to the QTIEngine preview page. Last page was $url";
		last;
	}

	# assuming the Location header points to something valid
	$url = $res->header("Location");

	# stop if we're at the preview page
	if ($url =~ /^http:\/\/$qtiengine_host\/item\/play\/0;/) {
		last;
	}

	# redirect
	$req = HTTP::Request->new(GET => $url);
	$req->protocol("HTTP/1.1");
	$req->header("Host" => $qtiengine_host);
	$req->header("Accept" => "*/*");
}

if (defined($error)) {
	die($error);
}

$session->redirect($url);

$session->terminate();

# return the item xml if it's a single item content package, otherwise 0
sub contentpackage_singleitem_xml {
	my ($doc) = @_;

	my $zip = Archive::Zip->new($doc->local_path() . "/" . $doc->get_value("main"));
	my $manifestxml = $zip->contents("imsmanifest.xml");
	if (!defined $manifestxml) {
		print STDERR "qtibox: error getting manifest\n";
		return 0;
	}
	my $dom = eval {
		EPrints::XML::parse_xml_string($manifestxml);
	};
	if ($@) {
		my $err = $@;
		$err =~ s# at /.*##;
		print STDERR "qtibox: error parsing manifest XML\n";
		return 0;
	}

	# get resources
	my $resources = $dom->getElementsByTagName("resource");
	if ($resources->getLength > 1) {
		return 0;
	} elsif ($resources->getLength == 0) {
		print STDERR "qtibox: no resources found\n";
		return 0;
	}

	# check resource type is item rather than assessment
	if ($resources->item(0)->getAttributeNode("type")->getValue !~ /^imsqti_item_/) {
		return 0;
	}

	# return the XML it points to
	my $xmlfilename = $resources->item(0)->getAttributeNode("href")->getValue;
	my $xml = $zip->contents($xmlfilename);
	if (!defined $xml) {
		print STDERR "qtibox: error getting contents of file '$xmlfilename'\n";
		return 0;
	}
	return $xml;
}

exit;
